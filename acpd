#!/usr/bin/env python3.4
#
# This file is part of acpd.
#
# acpd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# acpd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with acpd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the ACP web server"""

import datetime
import time
import re
import threading
import urllib.parse
import urllib.request
import Pyro4
from astropy.time import Time
from warwick.observatory.common import daemons, log

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

ACP_URI = 'http://127.0.0.1/ac/asystemstatus.asp'
QUERY_TIMEOUT = 3

DATA_REGEX = "_s\('(?P<key>[^']*)','@.[nf](?P<value>[^']*)'\)"
CAM_TEMP_REGEX = "(?P<temperature>-?[\d\.]+)%B0C/(?P<power>[\d\.]+)%25"

# pylint: disable=consider-using-f-string
# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=no-self-use
# pylint: disable=invalid-name


class ACPStatusDaemon:
    """Wraps a web request to the ACP web server"""
    def __init__(self):
        self._query_error = False
        self._regex = re.compile(DATA_REGEX)
        self._cam_temp_regex = re.compile(CAM_TEMP_REGEX)
        # create a weather loop thread for pinging
        # data to ACP single line file
        self.weather_loop = threading.Thread(target=self.__weather_loop)
        self.weather_loop.daemon = True
        self.weather_loop.start()

    def __write_acp_single_line(self, line, filetype='singleline'):
        """
        Write out the single line file for ACP
        """
        if filetype == 'singleline':
            name = "C:\\weather\\boltwood3.txt"
            opentype = 'w'
        else:
            name = "C:\\weather\\boltwood3_history.txt"
            opentype = 'a'
        try:
            f = open(name, opentype)
            f.write(line)
            f.close()
        except IOError:
            log.warn('Cannot access the boltwood weather file!')

    def __log_messages(self, buff, message_type):
        """
        Write out the error buffer to a file

        Todo: Replace this with logging to the database
        """
        if message_type == "error":
            name = "C:\\weather\\errors3.txt"
        elif message_type == 'info':
            name = "C:\\weather\\info3.txt"
        else:
            name = "C:\\weather\\warnings3.txt"
        with open(name, 'a') as f:
            for b in buff:
                line = "{} {}\n".format(datetime.datetime.utcnow(), b)
                f.write(line)

    def __weather_loop(self):
        """
        Run an infinite loop checking the weather
        """
        # weather tokens for ACP
        tokens = {'W': 0, 'R': 0, 'r': 0, 'w': 0}
        # these sensor values never change
        NOWDAYS_OFFSET = 2415018.5
        T_unit = 'C'
        V_unit = 'K'
        SenT = '22.0'
        Hea = '2'
        c = '1'
        d = '1'
        # initialise the data to None
        wrk_data = None
        # initialise the data values to 0
        wind = 0
        temperature = 0
        humidity = 0
        dew_point = 0
        sky_temp = 0
        # how many failed reads are ok?
        FAILED_MEASUREMENT_LIMIT = 10

        # loop forever
        while 1:
            # WARNING and ERROR logs
            WARWICK_ENVIRONMENT_FAILED_READS = 0
            WARNING_LOG = []
            ERROR_LOG = []
            # get the current time
            date = datetime.datetime.utcnow()

            # ping windmillhill environment and write single line file for ACP
            # format of the boltwood single line file for ACP
            # this is taken from the original boltwood_imitate script
            #    Date Time 'C' 'K' SkyT AmbT 'SenT' Wind Hum DewPt 'Hea' *R* *W* since NowDays c *w* *r* d
            # values in '' never change
            # flags in ** are used to trigger safe/unsafe
            try:
                with daemons.warwick_environment.connect() as wrk_env:
                    wrk_data = wrk_env.status()
                    # parse all the data
                    if wrk_data:
                        # vaisala
                        vaisala = wrk_data['vaisala']['parameters']
                        cloudwatcher = wrk_data['cloudwatcher']['parameters']
                        rain_sensors = wrk_data['rain']['parameters']
                        n_parameters = len(vaisala) + len(cloudwatcher) + len(rain_sensors)

                        # first check if all measurements are ok and current
                        current, unsafe = 0, 0
                        for param in vaisala:
                            unsafe += vaisala[param]['unsafe']
                            current += vaisala[param]['current']
                        for param in cloudwatcher:
                            unsafe += cloudwatcher[param]['unsafe']
                            current += cloudwatcher[param]['current']
                        for param in rain_sensors:
                            unsafe += rain_sensors[param]['unsafe']
                            current += rain_sensors[param]['current']

                        # if any are unsafe or stale, trigger alert by setting tokens
                        if unsafe > 0 or current < n_parameters:
                            tokens['W'] = 2
                            tokens['R'] = 2
                            tokens['r'] = 3
                            tokens['w'] = 3
                        else:
                            tokens['W'] = 0
                            tokens['R'] = 0
                            tokens['r'] = 1
                            tokens['w'] = 1

                        # next fetch the actual values for writing to single line file
                        wind = int(vaisala['wind_gust']['latest'])
                        temperature = round(vaisala['temperature']['latest'], 1)
                        #wind_direction = vaisala['wind_direction']['latest'] # missing atm
                        humidity = int(vaisala['relative_humidity']['latest'])
                        dew_point_delta = round(vaisala['dew_point_delta']['latest'], 2)
                        dew_point = round(temperature - dew_point_delta, 1)
                        sky_temp = round(cloudwatcher['sky_temp']['latest'], 2)

                        WARWICK_ENVIRONMENT_FAILED_READS = 0
                    # or report problem
                    else:
                        WARWICK_ENVIRONMENT_FAILED_READS += 1
                        WARNING_LOG.append('WARNING: CANNOT READ WINDMILL HILL VAISALA IN {0:d} ATTEMPTS'.format(WARWICK_ENVIRONMENT_FAILED_READS))
            except Pyro4.errors.CommunicationError:
                WARWICK_ENVIRONMENT_FAILED_READS += 1
                WARNING_LOG.append('WARNING: UNABLE TO COMMUNICATE WITH WARWICK ENVIRONMENT IN {0:d} ATTEMPTS'.format(WARWICK_ENVIRONMENT_FAILED_READS))

            # keep track of not being able to read from environment, close after some time
            if WARWICK_ENVIRONMENT_FAILED_READS > FAILED_MEASUREMENT_LIMIT:
                ERROR_LOG.append('ERROR: FAILED TO READ WARWICK ENVIRONMENT IN >{0:d} ATTEMPTS, ALERTING ACP'.format(FAILED_MEASUREMENT_LIMIT))
                # set all weather to bad
                tokens['W'] = 2
                tokens['R'] = 2
                tokens['r'] = 3
                tokens['w'] = 3

            # print any warnings
            print('{0:d} Warnings:'.format(len(WARNING_LOG)))
            for W in WARNING_LOG:
                print(W)
            self.__log_messages(WARNING_LOG, "warning")

            # print any errors
            print('{0:d} Errors:'.format(len(ERROR_LOG)))
            for E in ERROR_LOG:
                print(E)
            self.__log_messages(ERROR_LOG, "error")

            # generate the single line for ACP
            jd_local = Time(date, format='datetime').jd
            now_days = round(jd_local - NOWDAYS_OFFSET, 7)
            since = int((datetime.datetime.utcnow() - date).seconds)

            # generate the ACP single line file
            acp_line = ""
            # annoyingly ACP wants local time for the first entry.
            # use UTC for the since measurment only
            current_date = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            acp_line += current_date + ' '
            acp_line += T_unit + ' ' # dummy
            acp_line += V_unit + ' ' # dummy
            acp_line += str(sky_temp) + ' '
            acp_line += str(temperature) + ' '
            acp_line += SenT + ' '
            acp_line += str(wind) + ' '
            acp_line += str(humidity) + ' '
            acp_line += str(dew_point) + ' '
            acp_line += Hea + ' ' # dummy
            acp_line += str(tokens['R']) + ' '
            acp_line += str(tokens['W']) + ' '
            acp_line += str(since) + ' '
            acp_line += str(now_days, 7) + ' '
            acp_line += c + ' '
            acp_line += str(tokens['w']) + ' '
            acp_line += str(tokens['r']) + ' '
            acp_line += d + '\n'
            print(acp_line.rstrip())

            # write the line to disc
            history_line = "{}: {} ".format(datetime.datetime.utcnow(), acp_line)
            self.__write_acp_single_line(acp_line, filetype='singleline')
            self.__write_acp_single_line(history_line, filetype='history')

            # sleep for 10 seconds
            time.sleep(10)


    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        try:
            with urllib.request.urlopen(ACP_URI, timeout=QUERY_TIMEOUT) as response:
                result = response.readlines()[-1].decode('ascii').split(';')

            data = {
                # Set fallback date in case the query below fails
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION
            }

            for line in result:
                match = self._regex.match(line)
                if match:
                    key = match.group('key')
                    value = match.group('value')

                    if key == 'sm_utc':
                        # Update date with ACP value
                        data['date'] = datetime.datetime.utcnow().strftime('%Y-%m-%dT') \
                            + value.replace('%3A', ':') + 'Z'
                    elif key == 'sm_lst':
                        data['obs_lst'] = value.replace('%3A', ':')
                    elif key == 'sm_obsStat':
                        data['obs_status'] = urllib.parse.unquote(value)
                    elif key == 'sm_plnTgt':
                        data['obs_script'] = 'None' if value == 'n/a%20%28-/-%29' else urllib.parse.unquote(value)
                    elif key == 'sm_actStat':
                        data['obs_activity'] = urllib.parse.unquote(value)
                    elif key == 'sm_plnCnt':
                        data['obs_progress'] = value
                    elif key == 'sm_lastFWHM':
                        data['obs_fwhm'] = value
                    elif key == 'sm_scopeStat':
                        data['tel_status'] = urllib.parse.unquote(value)
                    elif key == 'sm_ra':
                        data['tel_ra'] = value.replace('%3A', ':')
                    elif key == 'sm_dec':
                        data['tel_dec'] = value.replace('%B0', ':').replace('%27', ':').replace('%22', '')
                    elif key == 'sm_alt':
                        data['tel_alt'] = value.replace('%B0', '')
                    elif key == 'sm_az':
                        data['tel_az'] = value.replace('%B0', '')
                    elif key == 'sm_camStat':
                        data['cam_status'] = urllib.parse.unquote(value)
                    elif key == 'sm_imgFilt':
                        data['cam_filter'] = urllib.parse.unquote(value)
                    elif key == 'sm_imgBin':
                        data['cam_binning'] = value.replace('%3A', 'x')
                    elif key == 'sm_imgTemp':
                        temp_match = self._cam_temp_regex.match(value)
                        if temp_match:
                            data['cam_temperature'] = temp_match.group('temperature')
                            data['cam_cooler'] = temp_match.group('power')

            if self._query_error:
                log.info('acpd', 'Restored contact with ACP web server')
                self._query_error = False

            return data

        except Exception as exception:
            print('{} ERROR: failed to query from ACP web server: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))

            if not self._query_error:
                log.error('acpd', 'Lost contact with ACP web server')
                self._query_error = True

            return None

if __name__ == '__main__':
    daemons.warwick_acp_monitor.launch(ACPStatusDaemon())
